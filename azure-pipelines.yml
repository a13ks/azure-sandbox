# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - master
jobs:
- job: A1
  pool:
    vmImage: 'vs2017-win2016'

  steps:
  - template: test-template.yml

  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: echo "this is my value from another script $(foo.bar)"

  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        $file = "$env:windir\System32\drivers\etc\hosts"
        "127.0.0.1 www.this-is-test-host.com" | Add-Content -PassThru $file
        Import-PfxCertificate -FilePath dummy.pfx -CertStoreLocation Cert:\LocalMachine\My
        # Add-NetIPHttpsCertBinding -IpPort "0.0.0.0:8443" -CertificateHash "8b7ac7e842997e14782c8f6e2f789a3fe3f0a171" -CertificateStoreName "My" -ApplicationId "{00000000-0000-0000-0000-000000000000}"
    displayName: "Install cert and add dns"

  - script: |
      netsh http add sslcert ipport=0.0.0.0:8443 certhash=8b7ac7e842997e14782c8f6e2f789a3fe3f0a171 appid={00000000-0000-0000-0000-000000000000}
    displayName: 'Add ssl cert'

  - script: |
      cmake -G "Visual Studio 15 2017" -B$(Build.BinariesDirectory) -DCMAKE_INSTALL_PREFIX=$(Build.BinariesDirectory)/install
      cmake --build $(Build.BinariesDirectory) --target install
      echo "##vso[task.setvariable variable=var1]$(Build.BinariesDirectory)\Debug\test-app.exe"
      echo "##vso[task.setvariable variable=var2]Debug/test-app.exe"
    displayName: 'Checkout and build'

  - powershell: |
      Write-Output "1 test output $(var1)"
      Write-Output "2 test output $(var2)"

  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Build.BinariesDirectory)
      # contents: 'Debug/**'
      contents: '**'
      targetFolder: $(Build.ArtifactStagingDirectory)

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)
      artifactName: MyBuildOutputs

- job: A2
  dependsOn: A1
  steps:
    - checkout: none
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: $(Build.ArtifactStagingDirectory)
        artifactName: MyBuildOutputs

- job: A3
  dependsOn:
  - A1
  - A2
  condition: or(failed('A1'), failed('A2'))
  steps:
  - script: |
      echo A1 or A2 failed
      echo Build.SourceBranchName $(Build.SourceBranchName)
      echo Build.SourceVersion $(Build.SourceVersion)
      echo Build.QueuedBy $(Build.QueuedBy)
      echo Build.BuildUri $(Build.BuildUri)
      echo Build.RequestedFor $(Build.RequestedFor)
      echo Build.RequestedForEmail $(Build.RequestedForEmail)
      echo Build.Reason $(Build.Reason)
      echo Build.Repository.Uri $(Build.Repository.Uri)
