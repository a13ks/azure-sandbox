# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  # vmImage: 'vs2015-win2012r2'
  name: Hosted VS2017
  demands:
  - msbuild
  - cmake

steps:

- script: |
    git submodule sync --recursive
    git submodule update --init --recursive
    cmake -G "Visual Studio 15 2017" -DGRPC_AS_SUBMODULE=ON -DgRPC_BUILD_TESTS=OFF -B$(Build.BinariesDirectory) -DCMAKE_INSTALL_PREFIX=$(Build.BinariesDirectory)/install
    cmake --build $(Build.BinariesDirectory) --target install
  displayName: 'Checkout and build'

- task: CopyFiles@2
  inputs:
    sourceFolder: $(Build.BinariesDirectory)
    # contents: 'Debug/**'
    contents: '**'
    targetFolder: $(Build.ArtifactStagingDirectory)

# Download Build Artifacts
- task: DownloadBuildArtifacts@0
  inputs:
    buildType: 'specific' # Options: current, specific
    project: 'bidstack-cpp-sdk' # Required when buildType == Specific
    pipeline: 'a13ks.bidstack-deps'
    #specificBuildWithTriggering: false # Optional
    buildVersionToDownload: 'latest' # Required when buildType == Specific# Options: latest, latestFromBranch, specific
    #allowPartiallySucceededBuilds: false # Optional
    #branchName: 'refs/heads/master' # Required when buildType == Specific && BuildVersionToDownload == LatestFromBranch
    #buildId: # Required when buildType == Specific && BuildVersionToDownload == Specific
    #tags: # Optional
    #downloadType: 'single' # Options: single, specific
    artifactName: 'install'
    #itemPattern: '**' # Optional
    downloadPath: '$(Build.BinariesDirectory)' 
    #parallelizationLimit: '8' # Optional

# - task: ArchiveFiles@2
#   inputs:
#     rootFolderOrFile: '$(Build.BinariesDirectory)/install/test1' 
#     #includeRootFolder: true 
#     archiveType: 'zip' # Options: zip, 7z, tar, wim
#     #tarCompression: 'gz' # Optional. Options: gz, bz2, xz, none
#     archiveFile: '$(Build.ArtifactStagingDirectory)/test-$(Build.BuildId).zip' 
#     #replaceExistingArchive: true 
#     #verbose: # Optional
#     #quiet: # Optional

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: $(Build.ArtifactStagingDirectory)
    artifactName: MyBuildOutputs
